strtoi(c("ffff", "FFFF"), 16L)
strtoi("7fffffff",16)
.Machine$integer.max
intToUtf8(k)
library(stringi)
?stri_encode
stri_enc_list()
Encoding("Uganda")
myEnc <- iconvlist()
length(myEnc)
head(myEnc)
head(myEnc,20)
head(myEnc,30)
tail(myEnc,15)
?substr
length(stri_enc_list())
myvect <- "The stri_encode function allows you to convert between any given encodings (in some cases
you will obtain bytes-marked strings, or even lists of raw vectors (i.e., for UTF-16). There are
also some useful more specialized functions, like stri_enc_toutf32 (converts a character vector"
myUT32 <- stri_enc_toutf32(myvect)
head(myUT32)
myUTF8 <- stri_enc_toutf8(myUT32)
myUTF8 <- stri_enc_toutf8(myUT32[[1]])
myUTF8
myUTF8 <- stri_enc_fromutf32(myUT32[[1]])
myUTF8
mylocale <- stri_locale_list()
head(mylocale)
mylocale
stri_opts_collator()
?stri_opts_collator
?stri_sub
?stri_subset
myList <- c("歡迎 欢迎! Χαίρετε! Bienvenidos! 😃❤🌍", "spam, spam, 🥓, 🍳, and spam")
length(myList)
stri_enc_detect(myList)
utf8ToInt(myList)
myUNCODE <- utf8ToInt(myList)
myUNCODE <- utf8ToInt(myList[1])
myUNCODE
intToUtf8(myUNCODE)
?stri_opts_brkiter
unRange <- ((16^5)+(15*16^3)+(15*16^2)+(15*16)+15)
unRange
?intToUtf8
?strtoi
as.hexmode(unRange)
intToUtf8(unRange)
a:z
seq(a:z)
intToUtf8(U+002E)
intToUtf8("U+002E")
intToUtf8(as.hexmode("U+002E"))
""U+002E""
""U+002E""
"U+002E"
print("U+002E")
utf8ToInt("U+002E")
intToUtf8(as.hexmode(2E))
intToUtf8(as.hexmode("2E"))
"\u2e"
"\u3b1"
\u{3b1 3b3 3b5 3b9}
paste0("\u", c("3b1", "3b3", "3b5", "3b9"))
mydig <- paste0("\u", c("3b1", "3b3", "3b5", "3b9"))
mydig <- c("\u3b1", "\u3b3", "\u3b5", "\u3b9")
mydig
"\u1F47D"
"\u1f47d"
"\uf47d"
"\u10f47d"
"\u1f47d"
"\u4e00"
myINT <- intToUtf8(as.hexmode("4e00"))
myINT
myINT <- intToUtf8(as.hexmode("4e00"))
myINT
"FFF0"
myINT2 <- intToUtf8(as.hexmode("FFF0"))
myINT2
library(stringi)
stri_opts_collator()
sroot <- function(n,gss = 1,esp = 0.0001){
while(abs(n - gss^2) >= esp){
gss <- (gss+(n/gss)/2)
}
gss
}
sroot(4)
sroot <- function(n,gss = 1,esp = 0.0001){
gss <- gss
while(abs(n - gss^2) <= esp){
gss <- (gss+(n/gss)/2)
}
gss
}
sroot(n = 4)
sroot(n = 9)
sroot <- function(n,igss = 1,esp = 0.0001){
fgss <- igss
while(abs(n - fgss^2) <= esp){
fgss <- (fgss+(n/gss)/2)
}
fgss
}
sroot(n = 9)
sroot <- function(n,igss = 1,esp = 0.0001){
while(abs(n - fgss^2) <= esp){
fgss <- (fgss+(n/gss)/2)
}
fgss
}
sroot <- function(n,igss = 1,esp = 0.0001){
while(abs(n - igss^2) <= esp){
fgss <- (igss+(n/gss)/2)
}
igss
}
sroot(n = 9)
sroot <- function(n,gss = 1,esp = 0.0001){
while(abs(n - gss^2) <= esp){
fgss <- (gss+(n/gss)/2)
}
fgss
}
sroot(n = 9)
3^2-5
sroot <- function(n,gss = 1,esp = 0.0001){
fgss = NULL
if(n = 1){
sroot <- function(n,gss = 1,esp = 0.0001){
fgss = NULL
if(n == 1){
fgss = 1
} else {
while(abs(n - gss^2) <= esp){
fgss <- sroot(n = (gss+(n/gss)/2),gss = gss,esp = esp)
}
}
fgss
}
sroot(n = 9)
sroot <- function(n,gss = 1,esp = 0.0001){
if(n == 1){
fgss = 1
} else {
while(abs(n - gss^2) <= esp){
fgss <- sroot(n = (gss+(n/gss)/2),gss = gss,esp = esp)
}
}
fgss
}
sroot(n = 9)
sroot <- function(n,gss = 1,esp = 0.0001){
while(abs((gss^2-n)>=esp)){
gss <- ((gss^2-n)/2*gss)
}
gss
}
sroot(n = 9)
sroot <- function(n,gss = 1,esp = 0.0001){
while(abs((gss^2-n)>=esp)){
gss <- gss - ((gss^2-n)/2*gss)
}
gss
}
sroot(n = 9)
sroot <- function(n,gss = 1,esp = 0.0001){
while(abs((gss^2-n)>=esp) && gss < n){
gss <- gss - ((gss^2-n)/2*gss)
}
gss
}
3^2-5
sroot(n = 9)
nthroot <- function (a, n, tol = 1 / 1000) {
x <- 1
deltax <- tol * 10
while (abs( deltax ) > tol) {
deltax <- (1 / n) * (a / x ^ (n - 1) - x)
x <- x + deltax
}
return (x)
}
nthroot(9,2)
sroot <- function(n,gss = 1,esp = 0.0001){
tol <- 0
while(tol >= esp)){
sroot <- function(n,gss = 1,esp = 0.0001){
tol <- 0
while(tol >= esp){
gss <- gss - ((gss^2-n)/2*gss)
tol <- abs(gss^2-n)
}
gss
}
sroot(n = 9)
sroot <- function(n,esp = 0.0001){
tol <- 0
gss = 1
while(tol >= esp){
gss <- gss - ((gss^2-n)/2*gss)
tol <- abs(gss^2-n)
}
gss
}
sroot(n = 9)
sroot <- function(n,esp = 0.0001){
tol <- esp*10
gss = 1
while(tol <= esp){
gss <- gss + ((gss^2-n)/2*gss)
tol <- abs(((gss^2-n)/2*gss))
}
gss
}
sroot(n = 9)
library(stringi)
?stri_opts_regex
?stri_replace_all
?stri_extract_all_words
myvect <- "The stri_encode function allows you to convert between any given encodings (in some cases
you will obtain bytes-marked strings, or even lists of raw vectors (i.e., for UTF-16). There are
also some useful more specialized functions, like stri_enc_toutf32 (converts a character vector"
words <- stri_extract_all_words(myvect)
head(words)
length(unique(words))
words <- stri_extract_all_words(myvect,simplify = TRUE)
head(words)
length(unique(words))
stri_count_words(myvect)
length(unique(stri_count_words(myvect)))
stri_datetime_now()
library(ggplot2)
system("ipconfig",intern = TRUE)
system("ipconfig",intern = TRUE)
system("ipconfig",intern = TRUE)
library(httr)
httr_options()
4%1
4%%1
5%%2
5%/%2
?kurtosis
?skewness
?skewness
?kurtosis
library(xts)
install.packages("xts")
library(xts)
library(moments)
detach("package:moments", unload = TRUE)
library(tools, lib.loc = "C:/Program Files/R/R-4.2.2/library")
mycodes <- Adobe_glyphs
View(mycodes)
unic_de <- charset_to_Unicode
View(unic_de)
charset_to_Unicode[1]
?show
import collections
reticulate::repl_python()
import collections
import collections
dir(collections)
dir(abc)
dir(collections.abc)
dir(collections.OrderedDict)
setwd("C:/Users/ATLAS/OneDrive/CS/DS_Algorithms/R")
merge_lists <- function(lis1,lis2){
mergList <- NULL
if(length(lis1) == 0){
mergList <- lis2
} else if(length(lis2) == 0){
mergList <- lis1
} else {
if(lis1[1] < lis2[1]){
mergList <- c(lis1[1],merge_lists(lis1 = lis1[2:length(lis1)],lis2 = lis2))
} else{
mergList <- c(lis2[1],merge_lists(lis1 = lis1,lis2 = lis2[2:length(lis2)]))
}
}
mergList
}
merge_lists(7,2)
merge_lists <- function(lis1,lis2){
mergList <- NULL
if(is.null(lis1)){
mergList <- lis2
} else if(is.null(lis2)){
mergList <- lis1
} else {
if(lis1[1] < lis2[1]){
mergList <- c(lis1[1],merge_lists(lis1 = lis1[2:length(lis1)],lis2 = lis2))
} else{
mergList <- c(lis2[1],merge_lists(lis1 = lis1,lis2 = lis2[2:length(lis2)]))
}
}
mergList
}
merge_lists(7,2)
myList1 <- c(3,6,3,45,2,3,12,5,65,43,5,6,78,3)
myList2 <- c(5,90,3,54,67,89,2,3,1,23,45,67,75)
merge_lists(myList1,myList2)
myList1[2:length(myList1)]
myLis <- c()
length(myLis)==0
seq_search <- function(inList,sTarget){
isMember = FALSE
for(j in seq_along(inList)){
if(inList[j] == sTarget){
isMember = TRUE
}
}
isMember
}
myList <- c(2,3,1,5,6,8,9,4,6,3,2,0)
seq_search(myList,20)
seq_search(myList,2)
myList <- c(2,5,6,9,78,89,234,800,1000,12,4,1,3,7,8,4,9,90,100)
selection_sort <- function(inPut,sze = length(inPut)){
for(j in 1:sze){
min_ind <- j
for(i in (j+1):sze){
if(inPut[j] > inPut[i] & !is.na(inPut[i])){
min_ind <- i
temp <- inPut[j]
inPut[j] <- inPut[i]
inPut[i] <- temp
}
}
}
inPut
}
combList <- c(myList1,myList2)
myOut <- selection_sort(myList)
myOut
selection_sort(combList)
selection_sort(myList1)
powFunction <- function(x,y){
pw <- 1
while(y >= 1){
y = y-1
pw <- pw*x
}
pw
}
powFunction(3,2)
powFunction(3,4)
powFunction(3,0)
powFunction(7,4)
powFunction(2,8)
nFactorial <- function(n){
nfact <- NULL
if(n == 1 || n == 0){
nfact <- 1
} else{
nfact <- n*nFactorial(n-1)
}
nfact
}
nFactorial(5)
nFactorial(4)
nFactorial(10)
nFactorial(30)
nFactorial(9)
nFactorial(8)
nFactorial(0)
nFactorial(1)
iterative_BSearch <- function(inlist,target){
lw <- 0
hg <- length(inlist)
md <- (lw+hg)%/%2
outPut <- FALSE
while(lw <= hg ){
if(inlist[md] == target){
outPut <- TRUE
} else if(inlist[md] < target){
hg <- md
} else if(inlist[md] > target){
lw <- md+1
}
}
outPut
}
myList <- c(1,2,3,6,7,9,12,13,34,56,70,89,90,422,677,800,900)
iterative_BSearch(myList,45)
insertion_sort <- function(iList){
mysort <- iList
for(i in seq_along(mysort)){
value <- mysort[i]
while(i < length(mysort) && mysort[i+1] < value){
temp <- mysort[i]
mysort[i] <- mysort[i+1]
mysort[i+1] <- temp
}
}
mysort
}
mylist <- c(12,3,1,4,10,5,9,0,4,45,23,12,7)
insertion_sort(mylist)
fibonacci <- function(intTo){
a <- 0
b <- 1
seqOut <- NULL
if(intTo == 0){
seqOut <- append(seqOut,a)
} else if(intTo == 1){
seqOut <- append(seqOut,a,b)
} else{
seqOut <- c(0,1)
for(j in 1:intTo){
a <- seqOut[j-1]
b <- seqOut[j]
seqOut <- append(seqOut,a+b)
}
}
seqOut
}
fibonacci(5)
fibonacci(10)
fibonacci(7)
fibonacci(12)
fib_number <- function(n){
n_n <- NULL
if(n == 0){
n_n <- 0
} else if(n == 1){
n_n <- 1
} else {
n_n <- fib_number(n-1)+fib_number(n-2)
}
n_n
}
fib_number(10)
fib_number(11)
fib_number(30)
fib_number(25)
fibonacci(30)
fib_number(25)
binary_search <- function(inlist,target,low = 1,high = length(inlist)){
mid <- (low+high)%/%2
outPut <- FALSE
if(low > high){
outPut <- FALSE
} else if(inlist[mid] == target){
outPut <- TRUE
} else if(target < inlist[mid]){
outPut <- binary_search(inlist = inlist,target = target,low = min(inlist),high = mid-1)
} else {
outPut <- binary_search(inlist = inlist,target = target,low = mid+1,high = high)
}
outPut
}
myList <- c(1,2,3,6,7,9,12,13,34,56,70,89,90,422,677,800,900)
binary_search(myList,7)
binary_search(myList,10)
reverse_string <- function(string){
strOut <- NULL
if(nchar(string) == 0){
strOut <- ""
} else {
strOut <- paste0(reverse_string(substr(string,start = 2,stop = nchar(string))),substr(string,start = 1,stop = 1))
}
strOut
}
reverse_string("joseph kitalikyawe")
reverse_string("Kitalikyawe")
reverse_string("Uganda Advanced Certificate of Education, UACE")
reverse_string("ECAU ,noitacudE fo etacifitreC decnavdA adnagU")
is_palindrome <- function(string){
isPalindrome <- NULL
sze <- nchar(string)
if(sze <= 1){
isPalindrome <- TRUE
} else {
isPalindrome <- substr(string,start = 1,stop = 1) == substr(string,start = nchar(string),stop = nchar(string)) & is_palindrome(substr(string,start = 2,stop = nchar(string)))
}
isPalindrome
}
is_palindrome("radar")
isPalindrome <- function(string){
string == reverse_string(string)
}
isPalindrome("radar")
reverse_string("Kenya National Examination Board, KNEB")
reverse_string("BENK ,draoB noitanimaxE lanoitaN ayneK")
binaryRep <- function(num){
binNum <- NULL
if(num < 2){
binNum <- num
} else{
binNum <- paste0(binaryRep(num%/%2),num%%2)
}
binNum
}
binaryRep(30)
binaryRep(18)
binaryRep(3)
binaryRep(24)
binaryRep(19)
binaryRep(777)
base_convert <- function(num,initBase = 10,finBase){
baseOut <- NULL
if(num < finBase){
baseOut <- num
} else {
baseOut <- paste0(base_convert(num = num%/%finBase,finBase = finBase),num%%finBase)
}
baseOut
}
base_convert(30,finBase = 3)
base_convert(142,finBase = 2)
